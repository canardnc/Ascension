-- public.icons definition

-- Drop table

-- DROP TABLE public.icons;

CREATE TABLE public.icons (
	id serial4 NOT NULL,
	filename varchar(255) NOT NULL,
	"type" varchar(50) NOT NULL,
	description text NULL,
	description_en varchar(255) NULL,
	CONSTRAINT icons_pkey PRIMARY KEY (id)
);
CREATE INDEX idx_icons_filename ON public.icons USING btree (filename);
CREATE INDEX idx_icons_type ON public.icons USING btree (type);


-- public.monsters definition

-- Drop table

-- DROP TABLE public.monsters;

CREATE TABLE public.monsters (
	monster_id serial4 NOT NULL,
	hp int4 NOT NULL,
	damage int4 NOT NULL,
	"range" float8 NOT NULL,
	attack_speed float8 NOT NULL,
	move_speed float8 NOT NULL,
	design text NULL,
	"size" float8 NOT NULL,
	monster_name text DEFAULT 'Monster'::text NOT NULL,
	points int4 DEFAULT 10 NOT NULL,
	CONSTRAINT monsters_pkey PRIMARY KEY (monster_id)
);


-- public.stat_categories definition

-- Drop table

-- DROP TABLE public.stat_categories;

CREATE TABLE public.stat_categories (
	id serial4 NOT NULL,
	"name" varchar(50) NOT NULL,
	display_name varchar(100) NULL,
	CONSTRAINT stat_categories_name_key UNIQUE (name),
	CONSTRAINT stat_categories_pkey PRIMARY KEY (id)
);


-- public.users definition

-- Drop table

-- DROP TABLE public.users;

CREATE TABLE public.users (
	id serial4 NOT NULL,
	email varchar(255) NOT NULL,
	hero_name varchar(100) NULL,
	created_at timestamp DEFAULT CURRENT_TIMESTAMP NULL,
	username varchar(255) NOT NULL,
	"level" int4 DEFAULT 1 NULL,
	"year" varchar(10) NULL,
	"admin" bool DEFAULT false NULL,
	teacher bool DEFAULT false NULL,
	parent bool DEFAULT false NULL,
	CONSTRAINT users_email_key UNIQUE (email),
	CONSTRAINT users_pkey PRIMARY KEY (id),
	CONSTRAINT users_username_key UNIQUE (username)
);


-- public.game_scores definition

-- Drop table

-- DROP TABLE public.game_scores;

CREATE TABLE public.game_scores (
	id serial4 NOT NULL,
	user_id int4 NULL,
	score int4 NOT NULL,
	duration int4 NOT NULL,
	completed_at timestamp DEFAULT CURRENT_TIMESTAMP NULL,
	CONSTRAINT game_scores_pkey PRIMARY KEY (id),
	CONSTRAINT game_scores_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id)
);


-- public.level_progress definition

-- Drop table

-- DROP TABLE public.level_progress;

CREATE TABLE public.level_progress (
	user_id int4 NOT NULL,
	level_id int4 NOT NULL,
	stars int4 DEFAULT 0 NULL,
	completed_at timestamp DEFAULT CURRENT_TIMESTAMP NULL,
	score int4 DEFAULT 0 NOT NULL,
	CONSTRAINT level_progress_pkey PRIMARY KEY (user_id, level_id),
	CONSTRAINT level_progress_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id)
);


-- public.levels definition

-- Drop table

-- DROP TABLE public.levels;

CREATE TABLE public.levels (
	id serial4 NOT NULL,
	"level" int4 NOT NULL,
	monster_id int4 NOT NULL,
	coords_x int4 NOT NULL,
	coords_y int4 NOT NULL,
	spawn_time int4 NOT NULL,
	amount int4 NOT NULL,
	monster_level int4 DEFAULT 1 NOT NULL,
	CONSTRAINT levels_pkey PRIMARY KEY (id),
	CONSTRAINT fk_monster FOREIGN KEY (monster_id) REFERENCES public.monsters(monster_id) ON DELETE CASCADE
);
CREATE INDEX idx_levels_level ON public.levels USING btree (level);
CREATE INDEX idx_levels_monster_id ON public.levels USING btree (monster_id);


-- public.minigames definition

-- Drop table

-- DROP TABLE public.minigames;

CREATE TABLE public.minigames (
	minigame_id serial4 NOT NULL,
	category_id int4 NOT NULL,
	title varchar(255) NOT NULL,
	description text NULL,
	difficulty_level int4 DEFAULT 1 NOT NULL,
	CONSTRAINT minigames_pkey PRIMARY KEY (minigame_id),
	CONSTRAINT minigames_category_id_fkey FOREIGN KEY (category_id) REFERENCES public.stat_categories(id)
);
CREATE INDEX idx_minigames_category_id ON public.minigames USING btree (category_id);
CREATE INDEX idx_minigames_difficulty_level ON public.minigames USING btree (difficulty_level);


-- public.minigames_progress definition

-- Drop table

-- DROP TABLE public.minigames_progress;

CREATE TABLE public.minigames_progress (
	id serial4 NOT NULL,
	user_id int4 NOT NULL,
	minigame_id int4 NOT NULL,
	difficulty_level int4 NOT NULL,
	points int4 DEFAULT 0 NULL,
	last_played timestamp DEFAULT CURRENT_TIMESTAMP NULL,
	total_played int4 DEFAULT 0 NULL,
	available bool DEFAULT true NULL,
	"cost" int4 DEFAULT 1 NULL,
	time_played int4 DEFAULT 0 NULL,
	CONSTRAINT minigames_progress_pkey PRIMARY KEY (id),
	CONSTRAINT minigames_progress_unique UNIQUE (user_id, minigame_id, difficulty_level),
	CONSTRAINT minigames_progress_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id)
);
CREATE INDEX idx_minigames_progress_minigame ON public.minigames_progress USING btree (minigame_id);
CREATE INDEX idx_minigames_progress_user_id ON public.minigames_progress USING btree (user_id);

-- Table Triggers

create trigger trigger_unlock_minigames after
insert
    or
update
    of points on
    public.minigames_progress for each row execute function unlock_minigames();
create trigger trigger_update_player_stats after
insert
    or
delete
    or
update
    on
    public.minigames_progress for each row execute function update_player_stats();


-- public.minigames_requirements definition

-- Drop table

-- DROP TABLE public.minigames_requirements;

CREATE TABLE public.minigames_requirements (
	minigame_id int4 NOT NULL,
	difficulty_level int4 NOT NULL,
	minigame_id_required int4 NOT NULL,
	difficulty_level_required int4 NOT NULL,
	score_required int4 NOT NULL,
	CONSTRAINT minigames_requirements_pkey PRIMARY KEY (minigame_id, difficulty_level, minigame_id_required, difficulty_level_required),
	CONSTRAINT minigames_requirements_minigame_fkey FOREIGN KEY (minigame_id) REFERENCES public.minigames(minigame_id),
	CONSTRAINT minigames_requirements_minigame_required_fkey FOREIGN KEY (minigame_id_required) REFERENCES public.minigames(minigame_id)
);
CREATE INDEX idx_minigames_requirements_minigame ON public.minigames_requirements USING btree (minigame_id, difficulty_level);
CREATE INDEX idx_minigames_requirements_required ON public.minigames_requirements USING btree (minigame_id_required, difficulty_level_required);


-- public.minigames_year definition

-- Drop table

-- DROP TABLE public.minigames_year;

CREATE TABLE public.minigames_year (
	"year" text NOT NULL,
	minigame_id int4 NOT NULL,
	difficulty_level int4 DEFAULT 1 NOT NULL,
	CONSTRAINT minigames_year_pkey PRIMARY KEY (year, minigame_id, difficulty_level),
	CONSTRAINT minigames_year_minigame_id_fkey FOREIGN KEY (minigame_id) REFERENCES public.minigames(minigame_id) ON DELETE CASCADE
);
CREATE INDEX idx_minigames_year_year ON public.minigames_year USING btree (year);


-- public.player_energy definition

-- Drop table

-- DROP TABLE public.player_energy;

CREATE TABLE public.player_energy (
	user_id int4 NOT NULL,
	current_energy int4 DEFAULT 20 NULL,
	max_energy int4 DEFAULT 20 NULL,
	last_refresh timestamp DEFAULT CURRENT_TIMESTAMP NULL,
	CONSTRAINT player_energy_pkey PRIMARY KEY (user_id),
	CONSTRAINT player_energy_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id)
);


-- public.player_stats definition

-- Drop table

-- DROP TABLE public.player_stats;

CREATE TABLE public.player_stats (
	id int4 DEFAULT nextval('player_stats_new_id_seq'::regclass) NOT NULL,
	user_id int4 NOT NULL,
	category_id int4 NOT NULL,
	points int4 DEFAULT 0 NOT NULL,
	updated_at timestamp DEFAULT CURRENT_TIMESTAMP NULL,
	CONSTRAINT player_stats_new_pkey PRIMARY KEY (id),
	CONSTRAINT player_stats_new_user_id_category_id_key UNIQUE (user_id, category_id),
	CONSTRAINT player_stats_new_category_id_fkey FOREIGN KEY (category_id) REFERENCES public.stat_categories(id),
	CONSTRAINT player_stats_new_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id)
);
CREATE INDEX idx_player_stats_category_id ON public.player_stats USING btree (category_id);
CREATE INDEX idx_player_stats_user_id ON public.player_stats USING btree (user_id);


-- public.stat_subcategories definition

-- Drop table

-- DROP TABLE public.stat_subcategories;

CREATE TABLE public.stat_subcategories (
	id serial4 NOT NULL,
	category_id int4 NOT NULL,
	"name" varchar(50) NOT NULL,
	display_name varchar(100) NULL,
	CONSTRAINT stat_subcategories_category_id_name_key UNIQUE (category_id, name),
	CONSTRAINT stat_subcategories_pkey PRIMARY KEY (id),
	CONSTRAINT stat_subcategories_category_id_fkey FOREIGN KEY (category_id) REFERENCES public.stat_categories(id)
);


-- public.unlocked_levels definition

-- Drop table

-- DROP TABLE public.unlocked_levels;

CREATE TABLE public.unlocked_levels (
	id serial4 NOT NULL,
	user_id int4 NULL,
	level_id int4 NOT NULL,
	unlocked_at timestamp DEFAULT CURRENT_TIMESTAMP NULL,
	CONSTRAINT unlocked_levels_pkey PRIMARY KEY (id),
	CONSTRAINT unlocked_levels_unique UNIQUE (user_id, level_id),
	CONSTRAINT unlocked_levels_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id)
);


-- public.player_substats definition

-- Drop table

-- DROP TABLE public.player_substats;

CREATE TABLE public.player_substats (
	id int4 DEFAULT nextval('player_substats_new_id_seq'::regclass) NOT NULL,
	user_id int4 NOT NULL,
	category_id int4 NOT NULL,
	subcategory_id int4 NOT NULL,
	points int4 DEFAULT 0 NOT NULL,
	updated_at timestamp DEFAULT CURRENT_TIMESTAMP NULL,
	CONSTRAINT player_substats_new_pkey PRIMARY KEY (id),
	CONSTRAINT player_substats_new_user_id_subcategory_id_key UNIQUE (user_id, subcategory_id),
	CONSTRAINT player_substats_unique UNIQUE (user_id, subcategory_id),
	CONSTRAINT player_substats_new_category_id_fkey FOREIGN KEY (category_id) REFERENCES public.stat_categories(id),
	CONSTRAINT player_substats_new_subcategory_id_fkey FOREIGN KEY (subcategory_id) REFERENCES public.stat_subcategories(id),
	CONSTRAINT player_substats_new_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id)
);
CREATE INDEX idx_player_substats_category_id ON public.player_substats USING btree (category_id);
CREATE INDEX idx_player_substats_subcategory_id ON public.player_substats USING btree (subcategory_id);
CREATE INDEX idx_player_substats_user_id ON public.player_substats USING btree (user_id);
